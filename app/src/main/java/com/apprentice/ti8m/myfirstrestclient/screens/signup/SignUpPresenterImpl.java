package com.apprentice.ti8m.myfirstrestclient.screens.signup;import com.apprentice.ti8m.myfirstrestclient.api.APIClient;import com.apprentice.ti8m.myfirstrestclient.model.User;import com.apprentice.ti8m.myfirstrestclient.utils.validator.LoginValidator;import java.lang.ref.WeakReference;import java.util.regex.Matcher;import java.util.regex.Pattern;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;/** * Created by gol on 31.10.17. * Don't copy my Stuff! */public class SignUpPresenterImpl implements SignUpPresenter {    private static final String EMAIL_PATTERN =            "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"                    + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";    private static final String PASSWORD_PATTERN = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20})";    private static Pattern pattern;    private static Matcher matcher;    private static ValidatorCallback validatorCallback;    private SignUpView signUpView;    private APIClient apiClient;    public SignUpPresenterImpl(SignUpView signUpView, APIClient apiClient) {        this.signUpView = signUpView;        this.apiClient = apiClient;        this.validatorCallback = new ValidatorCallback(this);    }    public static Boolean isSignupValid(String email, String password, String confirmPassword) {        Boolean temp = false;        if (isLoginEmailValid(email) && isBothPasswordsValid(password, confirmPassword)) {            temp = true;        }        return temp;    }    public static Boolean isLoginEmailValid(String email) {        pattern = Pattern.compile(EMAIL_PATTERN);        matcher = pattern.matcher(email);        return matcher.matches();    }    public static Boolean isLoginPasswordValid(String password) {        pattern = Pattern.compile(PASSWORD_PATTERN);        matcher = pattern.matcher(password);        return (matcher.matches());    }    public static Boolean isBothPasswordsValid(String password, String confirmPasword) {        return isLoginPasswordValid(password) && password.equals(confirmPasword);    }    @Override    public void signUp(String email, String password, String confirmPassword) {        if (isSignupValid(email, password, confirmPassword)) {            String encryptedPassword = LoginValidator.encryptStringToSHA256(password);            apiClient.createUser(new User(email, encryptedPassword))                    .enqueue(validatorCallback);        } else {            if (!LoginValidator.isLoginEmailValid(email)) {                onInvalidEmail();            }            if (!LoginValidator.isLoginPasswordValid(password)) {                onInvalidPassword();            }            if (!password.equals(confirmPassword)){                onInvalidConfirmPassword();            }        }    }    @Override    public void onInvalidEmail() {        signUpView.showInvalidEmail();    }    @Override    public void onInvalidPassword() {        signUpView.showInvalidPassword();    }    @Override    public void onInvalidConfirmPassword() {        signUpView.showInvalidConfirmPassword();    }    @Override    public void onStartMainActivity() {        signUpView.startMainActivity();    }    @Override    public void onSetSignedUp() {        signUpView.setSignedUp();    }    @Override    public void onHandleFailure() {        signUpView.handleFailure();    }    @Override    public void onUserAlreadyExists() {        signUpView.userAlreadyExists();    }    private static class ValidatorCallback implements Callback<Void> {        private WeakReference<SignUpPresenter> signUpPresenterWeakReference;        ValidatorCallback(SignUpPresenter signUpPresenter) {            signUpPresenterWeakReference = new WeakReference<>(signUpPresenter);        }        @Override        public void onResponse(Call<Void> call, Response<Void> response) {            if (response.isSuccessful()) {                SignUpPresenter presenter = signUpPresenterWeakReference.get();                if (presenter == null) {                    return;                }                presenter.onSetSignedUp();                presenter.onStartMainActivity();            } else {                SignUpPresenter signUpPresenter = signUpPresenterWeakReference.get();                if (signUpPresenter == null) {                    return;                }                signUpPresenter.onUserAlreadyExists();            }        }        @Override        public void onFailure(Call<Void> call, Throwable t) {            SignUpPresenter signUpPresenter = signUpPresenterWeakReference.get();            if (signUpPresenter == null) {                return;            }            signUpPresenter.onHandleFailure();        }    }}